{"version":3,"sources":["static/luke-skywalker.png","static/darth-vader.png","constants.ts","Home/messages.ts","Hooks/useFetch.tsx","State/MasterContext.tsx","Home/index.tsx","Result/messages.ts","Result/index.tsx","theme.tsx","Hooks/useMaster.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","FETCH_STATUS","messages","welcomeText","appName","frontendChallenge","buttonLabel","MASTERS","mapMasterToPalette","mapMasterToIcon","Luke","Vader","useFetch","shouldFetch","initialMaster","useState","IDLE","status","setStatus","masterName","setMasterName","useEffect","a","FETCHING","fetchLuke","fetch","method","fetchVader","Promise","race","response","json","data","name","FETCHED","fetchData","React","createContext","master","setCurrentMaster","currentMaster","StyledButton","styled","Button","theme","spacing","palette","common","white","text","primary","Home","useTheme","setShouldFetch","useContext","masterContext","history","useHistory","push","Box","display","flexDirection","alignItems","mt","mb","Typography","color","variant","disableElevation","disabled","onClick","back","yourMaster","StyledAppBar","AppBar","shadows","StyledAvatar","isMobile","props","Avatar","Result","useMediaQuery","pathButton","height","minHeight","bgcolor","elevation","Toolbar","IconButton","href","pt","alt","src","p","py","createMuiTheme","main","contrastText","secondary","black","shape","borderRadius","typography","fontFamily","join","h1","fontSize","subtitle1","subtitle2","button","useMaster","setMaster","useCallback","App","ThemeProvider","MasterContext","Provider","value","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.30e41edb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/luke-skywalker.738fc480.png\";","module.exports = __webpack_public_path__ + \"static/media/darth-vader.3e06b3a8.png\";","import * as Luke from './static/luke-skywalker.png';\nimport * as Vader from './static/darth-vader.png';\n\ninterface StringMap { [key: string]: string; }\ntype paletteColor = 'primary' | 'secondary' | undefined;\ninterface PaletteColorMap { [key: string]: paletteColor; }\n\nexport const MASTERS: StringMap = {\n  LUKE: 'Luke Skywalker',\n  VADER: 'Darth Vader',\n};\n\nexport const mapMasterToPalette: PaletteColorMap = {\n  [MASTERS.LUKE]: 'primary',\n  [MASTERS.VADER]: 'secondary',\n}\n\nexport const mapMasterToIcon = {\n  [MASTERS.LUKE]: Luke,\n  [MASTERS.VADER]: Vader,\n}\n\nexport enum FETCH_STATUS {\n  FETCHING,\n  FETCHED,\n  IDLE,\n}","interface StringMap { [key: string]: string; }\n\nconst messages: StringMap = {\n  welcomeText: 'Welcome to ',\n  appName: 'test-app',\n  frontendChallenge: 'FRONTEND CHALLENGE',\n  buttonLabel: 'S t a r t',\n};\n\nexport default messages;\n","import { useEffect, useState } from 'react';\nimport { FETCH_STATUS } from '../constants';\n\nconst useFetch = (shouldFetch: boolean = true, initialMaster: string = '') => {\n  const [status, setStatus] = useState(FETCH_STATUS.IDLE);\n  const [masterName, setMasterName] = useState(initialMaster);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setStatus(FETCH_STATUS.FETCHING);\n      const fetchLuke = fetch('http://swapi.dev/api/people/1/', { method: 'GET' });\n      const fetchVader = fetch('http://swapi.dev/api/people/4/', { method: 'GET' });\n      const response = await Promise.race([fetchLuke, fetchVader]);\n\n      const data = await response.json();\n\n      setMasterName(data.name);\n      setStatus(FETCH_STATUS.FETCHED);\n    };\n\n    if (shouldFetch) {\n      fetchData();\n    }\n  }, [shouldFetch]);\n\n  return { status, masterName };\n};\n\nexport default useFetch;\n","import React from 'react'\n\nexport interface MasterContext {\n  master: string;\n  setCurrentMaster: (currentMaster: string) => void;\n};\n\nexport const defaultMasterContext = {\n  master: '',\n  setCurrentMaster: (currentMaster: string) => {}\n};\n\nexport default React.createContext(defaultMasterContext)\n","import React, { useContext, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\n\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { useTheme } from '@material-ui/core/styles';\n\nimport messages from './messages';\nimport useFetch from '../Hooks/useFetch';\nimport masterContext from '../State/MasterContext';\nimport { FETCH_STATUS } from '../constants'\n\nconst StyledButton = styled(Button)`\n  padding: ${({ theme }) => theme.spacing(2, 7)};\n  color: ${({ theme }) => theme.palette.common.white};\n  background-color: ${({ theme }) => theme.palette.text.primary};\n\n  &:hover {\n    background-color: ${({ theme }) => theme.palette.text.primary};\n  }\n`;\n\nexport const Home = () => {\n  const theme = useTheme();\n  const [shouldFetch, setShouldFetch] = useState(false);\n  const { setCurrentMaster } = useContext(masterContext);\n\n  const { status, masterName } = useFetch(shouldFetch);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (masterName) {\n      setCurrentMaster(masterName)\n      history.push('/result');\n    }\n  }, [history, masterName, setCurrentMaster]);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n      <Box mt={26} mb={1}>\n        <Typography color=\"textPrimary\" variant=\"h1\">\n          {messages.welcomeText}\n          <b>\n            {messages.appName}\n          </b>\n        </Typography>\n      </Box>\n      <Typography color=\"textPrimary\" variant=\"subtitle2\">\n        {messages.frontendChallenge}\n      </Typography>\n      <Box mt={20}>\n        <StyledButton\n          disableElevation\n          disabled={status === FETCH_STATUS.FETCHING}\n          onClick={() => setShouldFetch(true)}\n          variant=\"contained\"\n          theme={theme}\n        >\n          <Typography variant=\"button\">\n            {messages.buttonLabel}\n          </Typography>\n        </StyledButton>\n      </Box>\n    </Box>\n  );\n}\n\nexport default Home;\n","interface StringMap { [key: string]: string; }\n\nconst messages: StringMap = {\n  back: 'back',\n  buttonLabel: 'choose your path again, Padawan',\n  yourMaster: 'Your master is ',\n};\n\nexport default messages;\n","import React, { useContext, useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { useTheme } from '@material-ui/core/styles';\nimport { shadows } from '@material-ui/system';\nimport ArrowBack from '@material-ui/icons/ArrowBack';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nimport useFetch from '../Hooks/useFetch';\nimport { mapMasterToPalette, mapMasterToIcon, FETCH_STATUS } from '../constants';\nimport messages from './messages';\nimport masterContext from '../State/MasterContext';\n\nconst StyledAppBar = styled(AppBar)`\n  ${shadows}\n`;\n\nconst StyledButton = styled(Button)`\n  padding: ${({ theme }) => theme.spacing(2, 4)};\n  text-transform: none;\n`;\n\nconst StyledAvatar = styled(({ isMobile, ...props }) => (\n  <Avatar {...props} />\n))`\n  height: ${({ isMobile }) => isMobile? '302px' : '380px'};\n  width: ${({ isMobile }) => isMobile? '302px' : '380px'};\n`;\n\nexport const Result = () => {\n  const theme = useTheme();\n  const [shouldFetch, setShouldFetch] = useState(false);\n  const { master } = useContext(masterContext);\n  const { status, masterName } = useFetch(shouldFetch, master);\n  const palette = mapMasterToPalette[masterName];\n  const isMobile = useMediaQuery('(max-width:800px)');\n\n  useEffect(() => {\n    if (status === FETCH_STATUS.FETCHED) {\n      setShouldFetch(false)\n    }\n  }, [status])\n\n  const pathButton = (\n    <StyledButton\n      onClick={() => setShouldFetch(true)}\n      disabled={status === FETCH_STATUS.FETCHING}\n      variant=\"contained\"\n      color={palette}\n      theme={theme}\n      disableElevation\n    >\n      <Typography>\n        <b>\n          {messages.buttonLabel}\n        </b>\n      </Typography>\n    </StyledButton>\n  );\n\n  return (\n    <Box height=\"100%\" minHeight=\"100vh\" bgcolor={`${palette}.contrastText`}>\n      <StyledAppBar elevation={0} color=\"transparent\">\n        <Toolbar>\n          <IconButton color={palette} href=\"/\">\n            <ArrowBack />\n          </IconButton>\n          <Typography color={palette}>\n            {messages.back}\n          </Typography>\n        </Toolbar>\n      </StyledAppBar>\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n        {!isMobile ? (\n          <Box pt={22}>\n            {pathButton}\n          </Box>\n        ) : null}\n        <Box pt={isMobile ? 26 : 9}>\n          <StyledAvatar isMobile={isMobile} alt={masterName} src={mapMasterToIcon[masterName]} />\n        </Box>\n        <Box p={isMobile ? 4 : 5}>\n          <Typography color={palette} variant=\"subtitle1\">\n            {messages.yourMaster}<b>{masterName}</b>\n          </Typography>\n        </Box>\n        {isMobile ? (\n          <Box py={4}>\n            {pathButton}\n          </Box>\n        ) : null}\n      </Box>\n    </Box>\n  );\n}\n\nexport default Result;\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#2A2A2A',\n      contrastText: '#FBFE63',\n    },\n    secondary: {\n      main: '#FFFFFF',\n      contrastText: '#2B2B2B',\n    },\n    text: {\n      primary: '#2C97D1',\n    },\n    common: {\n      black: '#000000',\n      white: '#FFFFFF'\n    },\n  },\n  shape: {\n    borderRadius: 10,\n  },\n  typography: {\n    fontFamily: [\n      'Montserrat',\n    ].join(','),\n    h1: {\n      'fontSize': '4.5rem',\n      'fontWeight': 'normal',\n      '@media (max-width:900px)': {\n        fontSize: '1.5rem',\n      },\n    },\n    subtitle1: {\n      'textAlign': 'center',\n      'fontSize': '2.25em',\n      'lineHeight': '1.25em',\n    },\n    subtitle2: {\n      'fontWeight': 'normal',\n      'letterSpacing': '0.35em',\n      'lineHeight': '1.25em',\n    },\n    button: {\n      'fontSize': '1.125rem',\n      'lineHeight': '1.25em',\n      'fontWeight': 'bold',\n    },\n  }\n});\n\nexport default theme;\n","import React from 'react';\nimport { MasterContext } from '../State/MasterContext';\n\nexport const useMaster = (): MasterContext => {\n  const [master, setMaster] = React.useState('');\n\n  const setCurrentMaster = React.useCallback((currentMaster: string): void => {\n    setMaster(currentMaster);\n  }, []);\n\n  return {\n    master,\n    setCurrentMaster,\n  };\n};\n\nexport default useMaster;\n","import React from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport Home from './Home';\nimport Result from './Result';\nimport theme from './theme';\nimport useMaster from './Hooks/useMaster';\nimport MasterContext from './State/MasterContext';\n\nfunction App() {\n  const master = useMaster();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <MasterContext.Provider value={master}>\n        <Router>\n            <Switch>\n              <Route path=\"/result\">\n                <Result />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n        </Router>\n      </MasterContext.Provider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}